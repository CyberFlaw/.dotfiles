# Basic Settings
set ignorecase true
set icons true

# Env variables
$EDITOR=hx

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
  clear
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  touch $ans
  clear
}}

cmd trash ${{
  trash-put "$f"
}}

cmd rmfile ${{
  rm $f
}}

cmd rmfolder ${{
  rm -rf $f
}}

cmd rename ${{
  printf "New Name: "
  read ans
  mv $f $ans
  clear
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd)
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}

cmd gitcommit ${{
  printf "Commit Name: "
  read $ans
  git commit -m $ans
}}

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map au unarchive

# Basic Functions
map DD trash
map x cut
map C clear
map p paste
map <enter> open
map R reload
map mf mkfile
map md mkdir
map mr rename
map dd trash
map dr restore_trash
map df rmfile
map dF rmfolder

